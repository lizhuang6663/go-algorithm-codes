package main

// 数学
// 力扣：https://leetcode.cn/problems/factorial-zeros-lcci/

// 0的产生需要5 * 2, 所以题目目标转换为求Math.min(count5,count2), 但2出现的数量明显大于5,
// 所以实际上题目的目标就是求5出现的次数 比如10！中出现了2个5，所以10！就有2个尾数0
// 优化：时间复杂度：O(logn)
func trailingZeroes(n int) int {
	ans := 0
	for n > 0 {
		n /= 5
		ans += n
	}
	return ans
}

// 计算 5 的倍数：
// 对于每个 5 的倍数（即 5, 10, 15, ...），这些数字都贡献了至少一个因子 5。因此，n / 5 计算出了 1 到 n 中有多少个数字是 5 的倍数。
// 计算更高的倍数 5^2：
// 每当遇到 25（即 5^2）时，这个数字会贡献额外的一个因子 5。例如，25, 50, 75, ... 都提供了一个额外的 5。所以我们需要计算 5^2 及以上倍数的贡献。
// 因此，第一轮循环的 n/5 相当于查找 5，10，15，20，25... 中的第一个5，第二轮循环的 n/5 就相当于查找 25，50，75... 中的第二个5，第三轮的 n/5 就相当于查找 75，125... 中的第三个5
